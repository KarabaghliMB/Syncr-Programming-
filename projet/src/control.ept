open Globals
open Utilities
open Debug

node turn_decoder(sens : sensors)
     	returns (turn : float)
var rc : color; r, g, b  : float;
let
  rc = sens.s_road;
  r = Mathext.float(rc.red);
  g = Mathext.float(rc.green);
  b = Mathext.float(rc.blue);
  turn = (r -. g)/.(b);
  (*Exemple d'uttilisation des fonctions de deboggage*)
  (*() = dbg("ping \n");
  () = dbg_float("rouge = ", r);
  () = dbg_float("vert = ", g);
  () = dbg_float("bleu = ", b);*)
tel
(*Ic j'ai ajouté un noeud pour améliorer la vitesse de move au fon par la ralentissage en les obstacles*)

node move_profd_avecRalentisseur(sens : sensors; speed : float)
     	retourner_ralens (rspeed : wheels; etape : bool)
var rc : color; tourner_ralen, Vitesse_obstacle_tourn, Vitesse_Ralentir, n_tourner_ralen : float; rouge, feux: bool; last arrived : bool;
let
  (*ameliration move pour ralentir en obstacles*)
  rc = sens.s_road;
  Vitesse_Ralentir = 20.83 *. speed;
  Vitesse_obstacle_tourn = Vitesse_Ralentir *. (0.02);
  etape = if compare_colors(rc, green) >. 0.9 then true
  	     else false;
  feux = compare_colors(rc, red) >. 0.9;
  rouge = if feux then color_feu(sens)
  	     else false;
 tourner_ralen = if (not feux) then tourner_ralen_decoder(sens)
      	else 0.0;
 n_tourner_ralen = reg_PID(tourner_ralen, 0.0, 0.2, 0.1, 0.2);
  automaton
	state Forward
(*Note c est le contraire de ce q indiquai la methodologie conseille mais ça marhe...*)
	      do rspeed = if (etape or rouge) then {left = 0.0; right = 0.0}
  	      	 	  else{ left = (Vitesse_Ralentir)-. (Vitesse_obstacle_tourn *. n_tourner_ralen);
  	   	 	  	right = (Vitesse_Ralentir) +. (Vitesse_obstacle_tourn *. n_tourner_ralen) };
		(*() = dbg("Forward");*)
	      until feux then Signalisation
	state Signalisation
	      do (rspeed, arrived) = if rouge then ({left = 0.0; right = 0.0}, false)
		 	  	  else depasse_marque(sens, Vitesse_Ralentir, red);
	      until arrived then Forward
  end;
tel

(*ferra avancer la voiture jusqu'à ce qu'elle dépasse la marque au sol*)
node depasse_marque(sens : sensors; speed : float; obj : color)
     returns (rspeed : wheels; fini : bool)
var rc : color; v_max : float;
let
  rc = sens.s_road;
  v_max = 20.83 *. speed;
  fini = compare_colors(rc, obj) <=. 0.9;
  rspeed = if fini then {left = 0.0 ; right = 0.0}
  	   else {left = v_max ; right = v_max};
tel

node reg_PID(turn : float; r : float; k_p : float; k_i : float; k_d : float)
     returns (u : float)
var y, e, p, i, d : float;
let
  (*turn est en radiant, on le converti en degre*)
  y = (turn *. 180.0) /. pi;
  e = y -. r;
  p = k_p *. e;
  i = k_i *. integrator(e, 0.01, y);
  d = k_d *. derivative(e, 0.01);
  u = p +. i +. d;
tel

node color_feu(sens : sensors) returns (rouge : bool)
var fc : color;
let
  fc = sens.s_front;
  (*() = dbg_int("r = ", fc.red);
  () = dbg_int("g = ", fc.green);
  () = dbg_int("b = ", fc.blue);*)
  rouge = if compare_colors(fc, red) >. 0.9 then true
  	  else false;
  (*() = dbg_float("vert a: ", compare_colors(fc, red));*)
tel

node move_forward(sens : sensors; speed : float)
     	returns (rspeed : wheels; etape : bool)
var rc : color; turn, v_turn, v_max, n_turn : float; rouge, feux: bool; last fini : bool;
let
  (*() = dbg_float("speed = ", speed);*)
  rc = sens.s_road;
  (*Le 20.83 a été deduit par experimentation*)
  v_max = 20.83 *. speed;
  (*() = dbg_float("v_max = ", v_max);
  () = dbg(" ");*)
  v_turn = v_max *. (0.02);
  etape = if compare_colors(rc, green) >. 0.9 then true
  	     else false;
  feux = compare_colors(rc, red) >. 0.9;
  rouge = if feux then color_feu(sens)
  	     else false;
  (*() = dbg_bool("Feux rouge = ", rouge);*)

 turn = if (not feux) then turn_decoder(sens)
      	else 0.0;
 n_turn = reg_PID(turn, 0.0, 0.2, 0.1, 0.2);
  automaton
	state Forward
(*Note c est le contraire de ce q indiquai la methodologie conseille mais ça marhe...*)
	      do rspeed = if (etape or rouge) then {left = 0.0; right = 0.0}
  	      	 	  else{ left = (v_max)-. (v_turn *. n_turn);
  	   	 	  	right = (v_max) +. (v_turn *. n_turn) };
		(*() = dbg("Forward");*)
	      until feux then Signalisation
	state Signalisation
	      do (rspeed, fini) = if rouge then ({left = 0.0; right = 0.0}, false)
		 	  	  else depasse_marque(sens, v_max, red);
		(*() = dbg("Signalisation");*)
	      until fini then Forward
  end;

  (*() = dbg_float("turn = ", turn);
  () = dbg_float(" roue droite = ", rspeed.left);
  () = dbg_float(" roue gauche = ", rspeed.right);
  () = dbg_bool(" etape = ", etape);*)
tel

node rotate(angle : float ; sens : sensors)
     	returns (rspeed : wheels; etape : bool)
var last tps : float = 0.0; t_voulue, angle_ef : float; positif : bool; last fini : bool;
let
  positif = (angle >=. 0.0);
  (*On definit un "angle effectif" pour les cas où l'angle donné est négatif*)
  angle_ef = if positif then angle
  	      else (angle *. -.1.0);
  (*Kv = 86.96 a été déduit experimentalement*)
  t_voulue = angle_ef /. (86.96 *. 75.0 *. timestep);
  (*() = dbg_float("tps voulue: ", t_voulue);*)
  automaton
  	state Avancer
	      do etape = false;
	      	 (rspeed, fini) = depasse_marque(sens, 10.0, green);
	      until fini then Rot
	state Rot
	      do rspeed = if positif then {left = -.75.0; right = 75.0}
	      	 	  else {left = 75.0; right = -.75.0};
	      	 etape = false;
		 tps = last tps +. timestep;
		 (*() = dbg_float("tps ecoule = ", tps);*)
	      until (tps >=. t_voulue) then Fini
	state Fini
	      do rspeed = {left = 0.0; right = 0.0};
	         etape = true;
		 tps = 0.0;
	      until true then Avancer
  end
  (*rspeed = {left = -.75.0; right = 75.0};*)
tel

node suivre_ordre(sens : sensors; ordre : itielt)
     	returns (rspeed : wheels; etape : bool ; arriving : bool)
var vmax : float; last fini : bool;
let
  vmax = ordre.param;
  switch ordre.act
  | Stop do arriving = true;
    	    rspeed = {left = 0.0; right = 0.0};
	    etape = true;
	    (*() = dbg("STOP");*)
  | Turn do arriving = false;
    	    (rspeed, etape) = rotate(ordre.param, sens);
	    (*() = dbg("Turn");*)
  | Go do arriving = false;
       	  (*() = dbg("GO");*)
       	  automaton
		state Depasse
		      do etape = false;
		      	 (rspeed, fini) = depasse_marque(sens, vmax, green);
			 (*() = dbg("On attend de depasser la ligne verte");*)
		      until fini then Do_GO
		state Do_GO
       	  	      do (rspeed, etape) = move_profd_avecRalentisseur(sens, vmax);
		      until etape then Depasse
	  end;
  end;
  (*() = dbg_float("param = ", ordre.param);
  () = dbg_bool("arriving = ", arriving);*)
tel

node controller(sens : sensors; iti : itielts)
       returns (rspeed : wheels; arriving : bool)
var etape : bool; last cpt : int = 0; ordre : itielt;
let
  (*iti est un tableaux de itielt et pas un seul itielt...*)
  automaton
	state Avancer
	      do ordre = iti.[cpt] default {act = Go; param = 0.0};
       	     	 (rspeed, etape, arriving) = suivre_ordre(sens, ordre);
	      until etape then Incr
	state Incr
	      do cpt = last cpt + 1;
	      ordre = {act = Go; param = 0.0};
	      etape = false;
	      rspeed = {left = 0.0; right = 0.0};
	      arriving = false;
	      until true then Avancer
  end
tel
